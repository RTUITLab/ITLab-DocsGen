trigger:
- master
- develop

resources:
- repo: self

variables:
  ${{ if notIn(variables['Build.SourceBranchName'], 'master', 'develop') }}:
    buildImage: false
    deployService: false
    deployEnvironment: 'no'
    imageTags: 'no'
    serviceName: 'no'
  ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
    buildImage: true
    deployService: true
    deployEnvironment: development
    imageTags: |
      $(Build.BuildId)
      develop
    serviceName: itlab-develop_docsgen
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    buildImage: true
    deployService: true
    deployEnvironment: production
    imageTags: |
      $(Build.BuildId)
      latest
    serviceName: itlab_docsgen

stages:
- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Gradle@2
      inputs:
        gradleWrapperFile: 'gradlew'
        tasks: 'build'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        sonarQubeRunAnalysis: false
    - task: Gradle@2
      inputs:
        gradleWrapperFile: 'gradlew'
        tasks: 'copyLibToDeploy'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        sonarQubeRunAnalysis: false
    - publish: deploy
      artifact: itlab-docsgen
- stage: PackDockerImage
  displayName: Pack docker image
  condition: and(succeeded(), ${{variables.buildImage}})
  jobs:
  - job: Pack
    displayName: Pack
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: none
      - download: current
        artifact: itlab-docsgen
      - task: Docker@2
        displayName: Build an image
        inputs:
          containerRegistry: 'rtuitlab connection by admin'
          repository: 'rtuitlab/itlab-docsgen'
          command: 'buildAndPush'
          Dockerfile: '$(Pipeline.Workspace)/itlab-docsgen/Dockerfile'
          buildContext: '$(Pipeline.Workspace)/itlab-docsgen'
          tags: ${{variables.imageTags}}
      - task: Docker@2
        displayName: Build an image
        inputs:
          containerRegistry: 'private rtuitlab registry'
          repository: 'rtuitlab/itlab-docsgen'
          command: 'buildAndPush'
          Dockerfile: '$(Pipeline.Workspace)/itlab-docsgen/Dockerfile'
          buildContext: '$(Pipeline.Workspace)/itlab-docsgen'
          tags: ${{variables.imageTags}}
- stage: UpdateService
  condition: and(succeeded(), ${{variables.deployService}})
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    environment: ${{variables.deployEnvironment}}
    strategy:
      runOnce:
        deploy:
          steps:
            - download: none
            - task: SSH@0
              inputs:
                sshEndpoint: 'swarm manager'
                runOptions: 'commands'
                commands: 'docker service update --image registry.rtuitlab.dev/rtuitlab/itlab-docsgen:$(Build.BuildId) ${{variables.serviceName}} --with-registry-auth'
                readyTimeout: '20000'
